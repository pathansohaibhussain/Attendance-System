Project Description: **Simple Java Attendance System**

**Overview:**
The Simple Java Attendance System is a console-based application designed to efficiently manage and track student attendance. This project leverages Java programming language and MySQL database for effective data storage and retrieval. The system allows users to mark attendance for students, view attendance records, and maintain a database of students.

**Features:**
1. **Mark Attendance:**
   - Users can mark attendance for individual students by providing the student ID and specifying whether the student is present or absent.

2. **Database Integration:**
   - The system utilizes a MySQL database to store and manage student information and attendance records.
   - The database schema includes tables for `students` and `attendance`, with appropriate relationships.

3. **Student Management:**
   - Students are uniquely identified by a student ID, and their names are stored in the `students` table.

4. **Attendance Record:**
   - Each attendance record in the `attendance` table includes the student ID, date, and a boolean value indicating whether the student was present.

5. **User Interaction:**
   - The system interacts with users through a console interface, prompting them to mark attendance, view records, or exit the system.

**Technologies Used:**
- Java: The core programming language used to implement the system's logic and functionality.
- MySQL Database: A relational database management system used for storing and retrieving student and attendance data.
- JDBC (Java Database Connectivity): The Java API for connecting and interacting with databases from Java applications.

**Project Structure:**
1. **Student.java:**
   - Defines the `Student` class with attributes such as `studentId` and `studentName`.

2. **Attendance.java:**
   - Defines the `Attendance` class with attributes like `studentId`, `date`, and `present`.

3. **DatabaseConnector.java:**
   - Manages the connection to the MySQL database using JDBC.

4. **AttendanceDAO.java:**
   - Data Access Object class responsible for handling database operations related to attendance, such as marking attendance.

5. **Main.java:**
   - The main class where the console-based user interface is implemented. It allows users to interact with the system.

**Usage:**
- Users can run the `Main` class to initiate the attendance system.
- The system will prompt users to mark attendance, view records, or exit the system.
- Users can input student IDs, specify attendance status, and view the stored records.

**How to Run:**
1. Ensure that Java is installed on your system.
2. Set up a MySQL database with the required schema.
3. Download and include the MySQL JDBC driver in the project.
4. Compile and run the `Main` class to start the attendance system.

**Note:**
- Ensure that MySQL server is running and accessible from the Java application.
- Customize the database connection details in `DatabaseConnector.java` with your MySQL username, password, and database name.

This Simple Java Attendance System provides a foundational structure for tracking student attendance, and it can be expanded with additional features and improvements based on specific requirements.

****
Check User Information:

After connecting, you can execute SQL queries in the SQL Editor:

SELECT user(), current_user();

****
In IntelliJ IDEA, you can add a JAR file to your project's classpath using the following steps:

1. **Download MySQL Connector/J JAR:**
   Download the MySQL Connector/J JAR file from the [official MySQL website](https://dev.mysql.com/downloads/connector/j/). Choose the version that matches your MySQL server version.

2. **Open Your Project:**
   Open your Java project in IntelliJ IDEA.

3. **Navigate to Project Structure:**
   - Click on "File" in the top menu.
   - Select "Project Structure" (or press `Ctrl + Alt + Shift + S`).

4. **Add JAR to Libraries:**
   - In the Project Structure dialog, navigate to "Libraries" under "Project Settings."
   - Click the `+` button to add a new library.
   - Choose "Java" and navigate to the location where you downloaded the MySQL Connector/J JAR file.
   - Select the JAR file and click "OK."

5. **Apply Changes:**
   - Click "Apply" and then "OK" to close the Project Structure dialog.

6. **Verify the JAR is in Classpath:**
   - Open your Java file in the editor.
   - You should be able to import classes from the MySQL Connector/J library without any errors.

Here's a quick example of how to import the MySQL Connector/J classes in your Java code:

```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
```

You can now use the `Connection`, `DriverManager`, and other classes from the MySQL Connector/J library in your Java project.

Remember to replace `"your_username"` and `"your_password"` in the `DatabaseConnector` class with your MySQL database username and password.

After following these steps, your IntelliJ IDEA project should be configured to use the MySQL Connector/J library.